swagger: '2.0'
info:
  description: API definition for ProCrear students management system
  version: 1.0.0
  title: ProCrear API
  contact:
    email: jhoanmanuelms@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
- name: "Student"
- name: "Subject"
- name: "Course"
- name: "Average"
- name: "Print"
- name: "Grades"
- name: "Certificates"
- name: "Registration"

paths:
  /student:
    post:
      tags:
      - Student
      summary: Registers a new student
      operationId: registerStudent
      description: Registers a new student
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: student
        description: The student to register
        schema:
          $ref: '#/definitions/Student'
      responses:
        201:
          description: Student created
        400:
          description: Invalid input, object invalid
        409:
          description: The given student already exists

  /student/{code}:
    get:
      tags:
      - Student
      summary: Get a student information
      operationId: getStudent
      description: Retrieves the information for the student with the given code
      produces:
      - application/json
      parameters:
      - name: code
        in: path
        description: student code
        required: true
        type: number
      responses:
        200:
          description: student was found
          schema:
            $ref: '#/definitions/Student'
        404:
          description: student not found

  /student/{code}/credits:
    get:
      tags:
      - Student
      summary: Get the available credits for a student
      operationId: getStudentCredits
      description: Retrieves the number of credits available for the student with the given code
      produces:
      - application/json
      parameters:
      - name: code
        in: path
        description: student code
        required: true
        type: number
      responses:
        200:
          description: student available credits
        404:
          description: student not found

  /student/{code}/credits/expend/{toExpend}:
    post:
      tags:
      - Student
      summary: reduces the given number of credits for the student
      operationId: expendStudentCredits
      description: Reduces the given number of credits for the student
      produces:
      - application/json
      parameters:
      - name: code
        in: path
        description: student code
        required: true
        type: number
      - name: toExpend
        in: path
        description: number of credits to be expent
        required: true
        type: number
      responses:
        200:
          description: new amount of credits available for the student
          schema:
            $ref: '#/definitions/Student'
        404:
          description: student not found
        409:
          description: the student doesn't have enough credits

  /subject:
    get:
      tags:
      - Subject
      summary: Gets the subjects registered in the system
      operationId: getSubjects
      description: Gets the subjects registered in the system
      produces:
      - application/json
      responses:
        200:
          description: subjects list
          schema:
            type: array
            items:
              $ref: '#/definitions/Subject'

  /subject/{code}:
    get:
      tags:
      - Subject
      summary: Gets the information for the subject with the given code
      operationId: getSubject
      description: Gets the information for the subject with the given code
      produces:
      - application/json
      parameters:
      - name: code
        in: path
        description: student code
        required: true
        type: number
      responses:
        200:
          description: subject was found
          schema:
            $ref: '#/definitions/Subject'
        404:
          description: subject not found

  /course:
    post:
      tags:
      - Course
      summary: Register a student in a course
      operationId: registerCourse
      description: Register a student in a course
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: course
        description: The information of the student to register and the corresponding course
        schema:
          $ref: '#/definitions/Course'
      responses:
        201:
          description: the student was registered in the course
          schema:
            $ref: '#/definitions/Course'
        400:
          description: Invalid input, object invalid
        409:
          description: the given course already exists

  /course/student/{studentCode}:
    get:
      tags:
      - Course
      summary: Gets the courses registered for the given student
      operationId: getStudentCourses
      description: Gets the courses registered for the given student
      produces:
      - application/json
      parameters:
      - name: studentCode
        in: path
        description: student code
        required: true
        type: number
      responses:
        200:
          description: courses for student were found
          schema:
            type: array
            items:
              $ref: '#/definitions/Course'
        404:
          description: student isn't registered in any course

  /course/grades/student/{studentCode}/subject/{subjectCode}:
    get:
      tags:
      - Course
      summary: Gets the grade for the given student in the given course
      operationId: getStudentGrades
      description: Gets the grade for the given student in the given course
      produces:
      - application/json
      parameters:
      - name: studentCode
        in: path
        description: student code
        required: true
        type: number
      - name: subjectCode
        in: path
        description: subject code
        required: true
        type: string
      responses:
        200:
          description: grade for the student
        404:
          description: the student isn't registered in any course
    put:
      tags:
      - Course
      summary: Registers the grade for the given student in the given course
      operationId: postStudentGrades
      description: Registers the grade for the given student in the given course
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: studentCode
        in: path
        description: student code
        required: true
        type: number
      - name: subjectCode
        in: path
        description: subject code
        required: true
        type: string
      - name: grade
        in: formData
        description: Grade for the given student in the given subject
        type: number
        required: true
      responses:
        200:
          description: grade was registered
          schema:
            $ref: '#/definitions/Course'
        404:
          description: student isn't registered in any course

  /average:
    post:
      tags:
      - Average
      summary: Calculates the average of the given numbers
      operationId: calculateAverage
      description: Calculates the average of the given numbers
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: average
        description: Object containing the values to be averaged
        schema:
          $ref: '#/definitions/Average'
      responses:
        201:
          description: average calculated
        400:
          description: Invalid input, object invalid

  /print:
    post:
      tags:
      - Print
      summary: Prints the given document
      operationId: printDocument
      description: Prints the given document
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - in: formData
        name: document
        description: Document to be printed
        type: file
        required: true
      responses:
        201:
          description: Document printed

  /certificate/{studentCode}:
    get:
      tags:
      - Certificates
      summary: Generates the certification for the given student
      operationId: getStudentCertification
      description: Generates the certification for the given student
      produces:
      - application/json
      parameters:
      - name: studentCode
        in: path
        description: student code
        required: true
        type: number
      responses:
        200:
          description: Certification generated
          schema:
            $ref: '#/definitions/Certification'
        404:
          description: the student isn't registered in any course

  /registration:
    post:
      tags:
      - Registration
      summary: Register the given student in a course for the given subject
      operationId: studentCourseRegistration
      description: |
        - Validates if the student has the required credits for the course.
        - Registers the student in the course
        - Expends the credits
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: registration
        description: The information of the student and subject to perform the registration
        schema:
          $ref: '#/definitions/Registration'
      responses:
        201:
          description: The student was registered in the course
        400:
          description: Invalid input, object invalid
        404:
          description: Either the student or the subject are invalid
        409:
          description: The student is already registered in the course
        412:
          description: The student doesn't have the required credits

definitions:
  Student:
    type: object
    required:
    - code
    - name
    - lastName
    - credits
    properties:
      code:
        type: number
        example: 123456
      name:
        type: string
        example: Jhoan
      lastName:
        type: string
        example: Munoz
      credits:
        type: number
        example: 20
  Subject:
    required:
    - code
    - name
    properties:
      id:
        type: number
        example: 8765
      code:
        type: string
        example: FDP
      name:
        type: string
        example: Fundamentos De Programación
      credits:
        type: number
        example: 4
  Course:
    required:
    - studentCode
    - subjectCode
    properties:
      studentCode:
        type: number
        example: 123456
      subjectCode:
        type: string
        example: FDP
      grade:
        type: number
        example: 4.8
  Average:
    required:
    - values
    properties:
      values:
        type: array
        items:
          type: number
        example: [ 1, 2, 3 ]
  AverageResult:
    required:
    - average:
    properties:
      average:
        type: number
  CertificateStudent:
    properties:
      code:
        type: number
        example: 123456
      name:
        type: string
        example: Jhoan Munoz
  CertificateCourse:
    properties:
      code:
        type: string
        example: FDP
      name:
        type: string
        example: Fundamentos De Programación
      grade:
        type: number
        example: 4.8
  Certification:
    properties:
      student:
        $ref: '#/definitions/CertificateStudent'
      courses:
        type: array
        items:
          $ref: '#/definitions/CertificateCourse'
      average:
        type: number
        example: 4.5
  Registration:
    required:
    - studentCode
    - subjectCode
    properties:
      studentCode:
        type: number
        example: 123456
      subjectCode:
        type: string
        example: FDP

# Added by API Auto Mocking Plugin
host: localhost:8080
basePath: /procrear
schemes:
  - http
